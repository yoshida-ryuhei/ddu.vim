*ddu.txt*	Dark deno-powered UI framework for neovim/Vim8

Author: Shougo <Shougo.Matsu at gmail.com>
License: MIT license

CONTENTS						*ddu-contents*

Introduction		|ddu-introduction|
Install			|ddu-install|
Interface		|ddu-interface|
  Options		  |ddu-options|
  Functions		  |ddu-functions|
  Custom Functions	  |ddu-custom-functions|
Examples		|ddu-examples|
UIs			|ddu-uis|
  UI option	          |ddu-ui-options|
  UI params	          |ddu-ui-params|
Sources			|ddu-sources|
  Source option	          |ddu-source-options|
  Source params	          |ddu-source-params|
Filters			|ddu-filters|
  Filter options	  |ddu-filter-options|
  Filter params		  |ddu-filter-params|
Kinds			|ddu-kinds|
  Kind options		  |ddu-kind-options|
  Kind params		  |ddu-kind-params|
Create UI		|ddu-create-ui|
  UI attributes		  |ddu-ui-attributes|
Create source		|ddu-create-source|
  Source attributes	  |ddu-source-attributes|
  Item attributes    |ddu-item-attributes|
Create filter		|ddu-create-filter|
  filter attributes	  |ddu-filter-attributes|
Create kind		|ddu-create-kind|
  kind attributes	  |ddu-kind-attributes|
FAQ			|ddu-faq|
Compatibility		|ddu-compatibility|


==============================================================================
INTRODUCTION						*ddu-introduction*

*ddu* is the abbreviation of "dark deno-powered UI".  It provides an
asynchronous fuzzy finder UI.

If you don't want to configure plugins, you don't have to use the plugin.
It does not work with zero configuration.  You can use other plugins.


==============================================================================
INSTALL							*ddu-install*

Note: ddu.vim requires Neovim (0.6.0+) or Vim8.2.0662+ (latest is
recommended).

Please install both Deno and "denops.vim".

https://deno.land/
https://github.com/vim-denops/denops.vim

Note: ddu.vim does not include any sources and filters.
You must install them you want manually.
You can search ddu.vim plugins(sources and filters) from
https://github.com/topics/ddu-vim.


==============================================================================
INTERFACE						*ddu-interface*


------------------------------------------------------------------------------
OPTIONS	 						*ddu-options*

						*ddu-option-filterOptions*
filterOptions
		It is a dictionary that maps filter names to its options.
		See also |ddu-filter-options|.

		Default: {}

						*ddu-option-filterParams*
filterParams
		It is a dictionary that maps filter names to its parameters.
		See also |ddu-filter-params|.

		Default: {}

							*ddu-option-input*
input
		Specify an initial narrowing text.
		Note: If the input contains spaces, it means AND search.

		Default: ""

							*ddu-option-name*
name
		Specify the name.

		Default: "default"

							*ddu-option-profile*
profile
		Print profile result.
		Note: It is for debug.

							*ddu-option-push*
push
		Save the current ddu state and create new ddu state.
		Note: The state can be restored by |ddu#pop()|.

							*ddu-option-refresh*
refresh
		Refresh the items when |ddu-option-resume|.

							*ddu-option-resume*
resume
		Reuse the previous state.  If none exist, a new ddu
		state is created.
		Note: Uses |ddu-option-name| to search for previous state.

		Default: v:false

						*ddu-option-sourceOptions*
sourceOptions
		It is a dictionary that maps source names to its options.  The
		options with the name "_" is used as the options for all
		sources.
		See also |ddu-source-options|.

		Default: {}

						*ddu-option-sourceParams*
sourceParams
		It is a dictionary that maps source names to its parameters.
		See also |ddu-source-params|.

		Default: {}

							*ddu-option-sources*
sources
		It is a list of elements which are formatted as:
>
		{
		    'name': {source-name},
		    'options': {source-options},
		    'params': {source-params},
		}
<
		Items from sources with smaller indexes will have smaller
		indexes.

		Default: []

						*ddu-option-ui*
ui
		Specify UI name.
		Note: You must set the option in the first.

		Default: ""

						*ddu-option-uiOptions*
uiOptions
		It is a dictionary that maps UI names to its options.  The
		options with the name "_" is used as the options for all
		UIs.
		See also |ddu-ui-options|.

		Default: {}

						*ddu-option-uiParams*
uiParams
		It is a dictionary that maps UI names to its parameters.
		See also |ddu-ui-params|.

		Default: {}

							*ddu-option-volatile*
volatile
		Refresh items when |ddu#redraw()|.

------------------------------------------------------------------------------
FUNCTIONS 						*ddu-functions*

							*ddu#event()*
ddu#event({name}, {event})
		Call the ddu event handler.

		{name} is specified ddu name(|ddu-option-name|).

		{event} is the event name string.

			"cancel": After cancel the UI
			"close": After close the UI

						*ddu#get_item_actions()*
ddu#get_item_actions({name}, {items})
		Get the {name} actions for {items}.
		Note: You cannot mix multiple kinds/sources.

							*ddu#item_action()*
ddu#item_action({name}, {action}, {items}, {params})
		Do the {action} action for {items}.
		Note: You cannot mix multiple kinds/sources.

		{name} is specified ddu name(|ddu-option-name|).

		{params} is action params.

		Note: It is for creating UI interface.

							*ddu#pop()*
ddu#pop({name})
		Restore the previous state.
		If the state is empty, "cancel" the current ddu.
		Note The previous state is saved by |ddu-option-push|.

							*ddu#redraw()*
ddu#redraw({name}[, {opt}])
		Redraw the UI.

		{name} is specified ddu name(|ddu-option-name|).

		{opt} is the options.  The options below are available:

		input				(string)
		Specify narrowing text.

		refreshItems			(boolean)
		If it is true, refresh current items.

		updateOptions			(dictionary)
		Overwrites options. Refer to |ddu-options| about options.

							*ddu#start()*
ddu#start({options})
		Creates a new Ddu.
		Note: You cannot call it in |vim_starting|.  Because
		denops.vim is not initialized.

		Refer to |ddu-options| about {options}.  If you skip a value,
		it uses the default value.

							*ddu#ui_action()*
ddu#ui_action({name}, {action}, {params})
		Do the {action} action in current UI.

		{name} is specified ddu name(|ddu-option-name|).

		{params} is action params.


CUSTOM FUNCTIONS 					*ddu-custom-functions*

							*ddu#custom#action()*
ddu#custom#action({type}, {source-kind-name}, {action-name}, {func})
		Define {action-name} action for {source-kind-name}.
		{type} must be "source" or "filter".
		{source-kind-name} is source or kind name.
		{func} must be a |Funcref| or the name of a function.
>
		call ddu#custom#action('kind', 'file', 'test',
		    \ { args -> execute('let g:foo = 1') })
		call ddu#custom#action('source', 'file_old', 'test2',
		    \ { args -> execute('let g:bar = 1') })
<
							*ddu#custom#alias()*
ddu#custom#alias({type}, {alias-name}, {base-name})
		Define {alias-name} alias based on {base-name}.
		{type} must be "ui" or "source" or "filter" or "kind".
		Note: It must be called before sources/filters initialization.
>
		call ddu#custom#alias('source', 'foo', 'file')
		call ddu#custom#patch_global('sourceOptions', {
		      \ 'file': {'mark': 'A'},
		      \ 'foo': {'mark': 'foo'},
		      \ })
<
						*ddu#custom#get_aliases()*
ddu#custom#get_aliases()
		Get aliases.

					*ddu#custom#get_default_options()*
ddu#custom#get_default_options()
		Get the default options.

						*ddu#custom#get_global()*
ddu#custom#get_global()
		Get global options.

						*ddu#custom#get_local()*
ddu#custom#get_local()
		Get current buffer specific options.

						*ddu#custom#patch_global()*
ddu#custom#patch_global({option-name}, {value})
ddu#custom#patch_global({dict})
		Set {option-name} option to {value}.
		If {dict} is available, the key is {option-name} and the value
		is {value}. See |ddu-options| for available {option-name}.

						*ddu#custom#patch_local()*
ddu#custom#patch_local({buffer-name}, {option-name}, {value})
ddu#custom#patch_local({buffer-name}, {dict})
		Set local options for specific |ddu-option-name|.
		The arguments are the same as for |ddu#custom#patch_global()|.


==============================================================================
EXAMPLES						*ddu-examples*
>
	" You must set the default ui.
	" Note: ff ui
	" https://github.com/Shougo/ddu-ui-ff
	call ddu#custom#patch_global({
	    \ 'ui': 'ff',
	    \ })

	" You must set the default action.
	" Note: file kind
	" https://github.com/Shougo/ddu-kind-file
	call ddu#custom#patch_global({
	    \   'kindOptions': {
	    \     'file': {
	    \       'defaultAction': 'open',
	    \     },
	    \   }
	    \ })

	" Specify matcher.
	" Note: matcher_substring filter
	" https://github.com/Shougo/ddu-filter-matcher_substring
	call ddu#custom#patch_global({
	    \   'sourceOptions': {
	    \     '_': {
	    \       'matchers': ['matcher_substring'],
	    \     },
	    \   }
	    \ })

	" Set default sources
	" Note: file source
	" https://github.com/Shougo/ddu-source-file
	"call ddu#custom#patch_global({
	"    \ 'sources': [{'name': 'file', 'params': {}}],
	"    \ })
	
	" Call default sources
	"call ddu#start({})
	
	" Set buffer-name specific configuration
	"call ddu#custom#patch_local('files', {
	"    \ 'sources': [
	"    \   {'name': 'file', 'params': {}},
	"    \   {'name': 'file_old', 'params': {}},
	"    \ ],
	"    \ })
	
	" Specify buffer name
	"call ddu#start({'name': 'files'})

	" Specify source with params
	" Note: file_rec source
	" https://github.com/Shougo/ddu-source-file_rec
	"call ddu#start({'sources': [
	"    \ {'name': 'file_rec', 'params': {'path': expand('~')}}
	"    \ ]})
<

==============================================================================
UIS							*ddu-uis*

Note: The UIs are not bundled in ddu.vim.  You need to install them
to use ddu.vim.  Please search them by https://github.com/topics/ddu-ui


------------------------------------------------------------------------------
UI OPTIONS						*ddu-ui-options*

Note: The UIs cannot set default options for UI.  If the UI need
to specify the recommended configuration, you should write it in the
documentation instead.

						*ddu-ui-option-defaultAction*
defaultAction
		Specify the default action.
		Note: It overwrites kind/source default actions.

		Default: "default"


------------------------------------------------------------------------------
UI PARAMS					*ddu-ui-params*

These are the parameters that each source can have.  You can select the
behavior and tune the performance.

Please read the UI documentation.


==============================================================================
SOURCES							*ddu-sources*

Note: The sources are not bundled in ddu.vim.  You need to install them
to use ddu.vim.  Please search them by https://github.com/topics/ddu-source


------------------------------------------------------------------------------
SOURCE OPTIONS						*ddu-source-options*

Note: The sources cannot set default options for source.  If the source need
to specify the recommended configuration, you should write it in the
documentation instead.

				    		*ddu-source-option-converters*
converters		(string[])
		It is a list of registered filter names to change items
		attributes.
		Items will be processed in the order you specify here.

		Default: []

					*ddu-source-option-defaultAction*
defaultAction
		Specify the default action.
		Note: It overwrites kind default actions.

		Default: ""

				    	*ddu-source-option-ignoreCase*
ignoreCase		(boolean)
		If it is True, ddu ignores case.

		Default: v:false

						*ddu-source-option-matcherKey*
matcherKey		(string)
		Matcher compare key for items.

		Default: "word"

				    		*ddu-source-option-matchers*
matchers		(string[])
		It is a list of registered filter names to filter items
		by user input.
		Items will be processed in the order you specify here.

		Default: []

				    		*ddu-source-option-maxItems*
maxItems		(number)
		It is the max number of source items.
		It is applyed after sorters.

		Default: 10000

				    		*ddu-source-option-path*
path			(string)
		Specify an initial narrowing path.
		Note: It must be full path.

				    		*ddu-source-option-sorters*
sorters			(string[])
		It is a list of registered filter names to sort items.
		Items will be processed in the order you specify here.

		Default: []


------------------------------------------------------------------------------
SOURCE PARAMS					*ddu-source-params*

These are the parameters that each source can have.  You can select the
behavior and tune the performance.

Please read the source documentation.


==============================================================================
FILTERS							*ddu-filters*


------------------------------------------------------------------------------
FILTER OPTIONS						*ddu-filter-options*

Undefined now

------------------------------------------------------------------------------
FILTER PARAMS						*ddu-filter-params*

These are the parameters that each filter can have.  You can select the
behavior and tune the performance.

Please read the filter documentation.


==============================================================================
KINDS							*ddu-kinds*


------------------------------------------------------------------------------
KIND OPTIONS						*ddu-kind-options*

				    	*ddu-kind-option-defaultAction*
defaultAction	(string)
		Specify the default action.

		Default: ""


------------------------------------------------------------------------------
KIND PARAMS						*ddu-kind-params*

These are the parameters that each kind can have.  You can select the
behavior and tune the performance.

Please read the kind documentation.


==============================================================================
CREATE UI						*ddu-create-ui*

To create UI, you should read other UIs implementation.

The UIs must put under "denops/@ddu-uis/*.ts".

UI class must extend the BaseUi class.

Note: The UIs must be written in TypeScript language.

Note: If you call Vim functions, it is not asynchronous.


------------------------------------------------------------------------------
UI ATTRIBUTES						*ddu-ui-attributes*

						*ddu-ui-attribute-actions*
actions			(Record<string, function>)	(Optional)
		Defines UI actions.
		The actions are called from |ddu#ui_action()|.

						*ddu-ui-attribute-onInit*
onInit			(function)			(Optional)
		Called before call UI functions.

						*ddu-ui-attribute-params*
params			(function)			(Required)
		Called to get UI params.

						*ddu-ui-attribute-quit*
quit			(function)			(Optional)
		Called when quit current UI.

					*ddu-ui-attribute-refreshItems*
refreshItems		(function)			(Required)
		Called when refresh items.

						*ddu-ui-attribute-redraw*
redraw			(function)			(Required)
		Called when redraw UI.


==============================================================================
CREATE SOURCE						*ddu-create-source*

To create source, you should read other sources implementation.

The sources must put under "denops/@ddu-sources/*.ts".

The source class must extend the BaseSource class.

Note: The sources must be written in TypeScript language.

Note: If you call Vim functions, it is not asynchronous.


------------------------------------------------------------------------------
SOURCE ATTRIBUTES				*ddu-source-attributes*

						*ddu-source-attribute-actions*
actions			(Record<string, function>)	(Optional)
		Defines source specific actions.
		Note: It overwrites kind actions.

						*ddu-source-attribute-onEvent*
onEvent			(function)			(Optional)
		Called for the autocommands.
		It is useful to make cache.

						*ddu-source-attribute-onInit*
onInit			(function)			(Optional)
		Called before call source functions.

						*ddu-source-attribute-gather*
gather			(function)			(Required)
		It is called to gather items.

						*ddu-source-attribute-params*
params			(function)			(Required)
		Called to get source params.

------------------------------------------------------------------------------
ITEM ATTRIBUTES						*ddu-item-attributes*

					*ddu-item-attribute-action*
action		(List)			(Optional)
		The dictionary of actions.

					*ddu-item-attribute-display*
display		(String)			(Optional)
		The string displayed in Ddu buffer.  If it is omitted, word
		attribute is used instead.  It is not used for matching
		inputs.

					*ddu-item-attribute-highlights*
highlights	(List)			(Optional)
		The list of highlight.

		name				(string)
		The highlight name.

		hl_group			(string)
		|:highlight| group.  Please see |highlight-groups|.

		col				(number)
		The highlight start column.

		width				(number)
		The highlight end width.

					*ddu-item-attribute-word*
word		(String)			(Required)
		The word of a item. It is used for matching inputs.

==============================================================================
CREATE FILTER						*ddu-create-filter*

To create filter, you should read other filters implementation.

The filters must put under "denops/@ddu-filters/*.ts".

The filter class must extend the BaseFilter class.

Note: The filters must be written in TypeScript language.

Note: If you call Vim functions, it is not asynchronous.


------------------------------------------------------------------------------
FILTER ATTRIBUTES				*ddu-filter-attributes*

						*ddu-filter-attribute-filter*
filter			(function)			(Required)
		It is called to filter items.

						*ddu-filter-attribute-onInit*
onInit			(function)			(Optional)
		Called before call filter functions.

						*ddu-filter-attribute-params*
params			(function)			(Required)
		Called to get filter params.


==============================================================================
CREATE KIND						*ddu-create-kind*

To create kind, you should read other kinds implementation.

The kinds must put under "denops/@ddu-kinds/*.ts".

The kind class must extend the BaseKind class.

Note: The kinds must be written in TypeScript language.

Note: If you call Vim functions, it is not asynchronous.


------------------------------------------------------------------------------
KIND ATTRIBUTES						*ddu-kind-attributes*

						*ddu-kind-attribute-actions*
actions			(Record<string, function>)	(Required)
		Defines kind specific actions.

						*ddu-kind-attribute-params*
params			(function)			(Required)
		Called to get kind params.


==============================================================================
FREQUENTLY ASKED QUESTIONS (FAQ)			*ddu-faq*

Q: How to donate money to you?

A: I have started github sponsorship to spend more time for Vim/neovim
plugins.  You can donate money to help me!

   https://github.com/sponsors/Shougo


Q: Why does ddu.vim not include any UIs/sources/filters/kinds?

A: Because I cannot determine the best default UIs/sources/filters/kinds.
Users use different environments/policy, etc...
So ddu.vim should not define the defaults.
You must define your defaults by configuration.
ddu.vim does not conflict with your defaults.


Q: Why do UIs/sources/filters/kinds have no default options?

A: Because users can customize sources perfectly.  If a source has the
default, users have to check them.  It increases configuration cost.
The config should work as users config.

Q: I want to use ":Ddu" command like ":Denite" in denite.nvim

A: You can use ddu-commands.vim.
https://github.com/Shougo/ddu-commands.vim


==============================================================================
COMPATIBILITY						*ddu-compatibility*

2022.03.01
* Ddu does not split inputs by spaces.  It is filter's work.

2022.02.09
* Replace ddu#quit() to ddu#event().

2022.02.04
* neovim 0.6 is required.
* Users must set default kind.
* Cannot mix multiple kinds/sources for item action.

2022.01.29
* Rename ddu#do_action() to ddu#item_action().

2022.01.27
* Rename ddu#narrow() to ddu#redraw().

2022.01.22
* Split all uis/sources/filters/kinds.  You need to install and specify them
  manually.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
